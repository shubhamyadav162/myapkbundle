const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

const rootDir = path.join(__dirname, '..');
const rootGoogleServices = path.join(rootDir, 'google-services.json');
const androidDir = path.join(rootDir, 'android');
const androidAppDir = path.join(androidDir, 'app');
const androidGoogleServices = path.join(androidAppDir, 'google-services.json');
const gradlewPath = path.join(androidDir, 'gradlew');
const gradlewBatPath = path.join(androidDir, 'gradlew.bat');

console.error('üîß Preparing EAS build environment...');

// Function to ensure the libs.versions.toml file exists
function ensureTomlFile() {
  const tomlPath = path.join(rootDir, 'node_modules/react-native/gradle/libs.versions.toml');
  const tomlDir = path.dirname(tomlPath);
  
  // Create directory if it doesn't exist
  if (!fs.existsSync(tomlDir)) {
    console.error('üìÅ Creating directory for libs.versions.toml');
    fs.mkdirSync(tomlDir, { recursive: true });
  }
  
  if (!fs.existsSync(tomlPath)) {
    console.error('‚ö†Ô∏è libs.versions.toml missing - creating fallback');
    const tomlContent = `[versions]
android-gradle-plugin = "8.3.0"
kotlin = "1.9.22"
ndk = "25.2.9519653"
agp = "8.3.0"
androidx-annotation = "1.7.0"
androidx-appcompat = "1.6.1"

[libraries]
androidx-activity = "androidx.activity:activity:1.8.0"
androidx-annotation = { module = "androidx.annotation:annotation", version.ref = "androidx-annotation" }
androidx-appcompat = { module = "androidx.appcompat:appcompat", version.ref = "androidx-appcompat" }

[plugins]
android-application = { id = "com.android.application", version.ref = "agp" }
android-library = { id = "com.android.library", version.ref = "agp" }
kotlin-android = { id = "org.jetbrains.kotlin.android", version.ref = "kotlin" }`;
    
    fs.writeFileSync(tomlPath, tomlContent);
    console.error('‚úÖ Created fallback libs.versions.toml file');
  } else {
    console.error('‚úÖ libs.versions.toml file exists');
  }
}

// Check if android directory exists
if (!fs.existsSync(androidDir)) {
  console.error('üìÅ Android directory not found, will be created by prebuild step');
}

// Create a default google-services.json if it doesn't exist
if (!fs.existsSync(rootGoogleServices)) {
  console.error('üìÑ Creating a placeholder google-services.json file');
  const placeholderContent = {
    "project_info": {
      "project_number": "000000000000",
      "project_id": "placeholder-project",
      "storage_bucket": "placeholder-project.appspot.com"
    },
    "client": [{
      "client_info": {
        "mobilesdk_app_id": "1:000000000000:android:0000000000000000",
        "android_client_info": {
          "package_name": "com.placeholder.app"
        }
      },
      "api_key": [{
        "current_key": "placeholder-api-key"
      }],
      "services": {}
    }]
  };
  
  fs.writeFileSync(rootGoogleServices, JSON.stringify(placeholderContent, null, 2));
  console.error('‚úÖ Created placeholder google-services.json at project root');
}

// Verify or create android/app directory
if (!fs.existsSync(androidAppDir)) {
  console.error('üìÅ Creating android/app directory');
  fs.mkdirSync(androidAppDir, { recursive: true });
  console.error('‚úÖ Created android/app directory');
}

// Copy the google-services.json file to android/app
try {
  fs.copyFileSync(rootGoogleServices, androidGoogleServices);
  console.error('‚úÖ Copied google-services.json to android/app');
} catch (error) {
  console.error('‚ö†Ô∏è Error copying google-services.json:', error.message);
}

// Make gradlew executable if it exists
if (fs.existsSync(gradlewPath)) {
  try {
    fs.chmodSync(gradlewPath, '755');
    console.error('‚úÖ Set executable permissions on gradlew');
  } catch (error) {
    console.error('‚ö†Ô∏è Failed to set permissions on gradlew:', error.message);
  }
} else {
  console.error('‚ö†Ô∏è gradlew file not found. It will be generated by prebuild.');
}

// Verify gradle.properties has correct configurations
const gradlePropertiesPath = path.join(androidDir, 'gradle.properties');
if (fs.existsSync(gradlePropertiesPath)) {
  console.error('üìù Verifying gradle.properties configuration');
  
  let gradleProperties = fs.readFileSync(gradlePropertiesPath, 'utf8');
  
  // Ensure necessary properties are set
  const propertiesNeeded = {
    'org.gradle.jvmargs': '-Xmx4096m -XX:MaxPermSize=4096m -XX:+HeapDumpOnOutOfMemoryError',
    'android.useAndroidX': 'true',
    'android.enableJetifier': 'true',
    'org.gradle.parallel': 'true'
  };
  
  let modified = false;
  for (const [key, value] of Object.entries(propertiesNeeded)) {
    if (!gradleProperties.includes(key)) {
      gradleProperties += `\n${key}=${value}`;
      modified = true;
    }
  }
  
  if (modified) {
    fs.writeFileSync(gradlePropertiesPath, gradleProperties);
    console.error('‚úÖ Updated gradle.properties with necessary configurations');
  } else {
    console.error('‚úÖ gradle.properties already has necessary configurations');
  }
}

// Ensure the TOML file exists
ensureTomlFile();

console.error('‚úÖ EAS build preparation complete!'); 
