pluginManagement {
  try {
    def reactNativeDir = new File(rootDir, '../node_modules/react-native')
    def reactNativeGradlePlugin = new File(rootDir, '../node_modules/@react-native/gradle-plugin')
    
    if (reactNativeGradlePlugin.exists()) {
      includeBuild(reactNativeGradlePlugin.absolutePath)
    } else {
      println "Warning: @react-native/gradle-plugin not found, using fallback path"
      includeBuild('../node_modules/@react-native/gradle-plugin')
    }
    
    def expoDir = new File(rootDir, '../node_modules/expo')
    def expoPluginsPath = new File(rootDir, '../node_modules/expo-modules-autolinking/android/expo-gradle-plugin')
    
    if (expoPluginsPath.exists()) {
      includeBuild(expoPluginsPath.absolutePath)
    } else {
      println "Warning: expo-modules-autolinking not found, using fallback path"
      includeBuild('../node_modules/expo-modules-autolinking/android/expo-gradle-plugin')
    }
  } catch (Exception e) {
    println "Error during plugin management setup: ${e.message}"
  }
}

plugins {
  id("com.facebook.react.settings")
  id("expo-autolinking-settings")
}

try {
  extensions.configure(com.facebook.react.ReactSettingsExtension) { ex ->
    if (System.getenv('EXPO_USE_COMMUNITY_AUTOLINKING') == '1') {
      ex.autolinkLibrariesFromCommand()
    } else {
      ex.autolinkLibrariesFromCommand(expoAutolinking.rnConfigCommand)
    }
  }
  expoAutolinking.useExpoModules()
} catch (Exception e) {
  println "Error during React settings configuration: ${e.message}"
}

rootProject.name = 'Big Show'

try {
  expoAutolinking.useExpoVersionCatalog()
} catch (Exception e) {
  println "Error during Expo version catalog setup: ${e.message}"
}

include ':app'
